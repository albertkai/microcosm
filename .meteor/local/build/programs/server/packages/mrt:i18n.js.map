{"version":3,"file":"/packages/mrt:i18n.js","sources":["mrt:i18n/translator.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,kC;AACA,a;AACA,W;;AAEA,2C;;AAEA,mC;AACA,sD;AACA,qB;AACA,iD;AACA,+B;AACA,6B;AACA,8B;AACA,8D;AACA,mD;AACA,S;AACA,uB;AACA,Q;AACA,6C;AACA,+E;AACA,4C;AACA,uC;AACA,uC;AACA,qC;AACA,oD;AACA,sC;AACA,sE;AACA,W;AACA,S;AACA,sC;AACA,8B;AACA,2D;AACA,S;AACA,kC;AACA,yB;AACA,S;AACA,qE;AACA,0E;AACA,oC;AACA,kC;AACA,yB;AACA,S;AACA,wE;AACA,oC;AACA,S;AACA,wE;AACA,oC;AACA,S;AACA,+D;AACA,Q;AACA,oD;AACA,kD;AACA,6B;AACA,sB;AACA,S;AACA,a;AACA,+C;AACA,gD;AACA,oC;AACA,oD;AACA,sC;AACA,iB;AACA,qE;AACA,oC;AACA,iB;AACA,yB;AACA,4J;AACA,a;AACA,e;AACA,oC;AACA,2C;AACA,S;AACA,Q;AACA,4B;AACA,+E;AACA,0B;AACA,wC;AACA,S;AACA,O;AACA,K;;AAEA,8B;;AAEA,O;;AAEA,uC;AACA,0B;AACA,uE;AACA,K;AACA,4D;AACA,I;;AAEA,iC;AACA,oD;AACA,I;;AAEA,8D;;AAEA,oC;AACA,6B;AACA,G;;AAEA,4C;AACA,qC;AACA,G;;AAEA,4C;AACA,qI;AACA,4I;AACA,0F;AACA,I;;AAEA,6E;;AAEA,gD;;AAEA,c","sourcesContent":["// Generated by CoffeeScript 1.4.0\n(function() {\n  var root;\n\n  Meteor._TranslatorService = (function() {\n\n    function _TranslatorService() {\n      var localLocale, resolveParams, retrieveMessage,\n        _this = this;\n      resolveParams = function(message, params) {\n        var key, regexp, value;\n        for (key in params) {\n          value = params[key];\n          regexp = new RegExp('\\\\{\\\\{' + key + '\\\\}\\\\}', 'g');\n          message = message.replace(regexp, value);\n        }\n        return message;\n      };\n      retrieveMessage = function(messageId) {\n        var language, locale, message, messageParts, messages, territory, _ref;\n        messageParts = messageId.split('.');\n        messageId = messageParts.pop();\n        messages = Meteor.i18nMessages;\n        while (messageParts.length) {\n          messages = messages[messageParts.shift()];\n          if (!_.isObject(messages)) {\n            throw Error('_meteor.translator.missingMessageNamespace');\n          }\n        }\n        message = messages[messageId];\n        if (message == null) {\n          throw Error('_meteor.translator.missingMessage');\n        }\n        if (_.isString(message)) {\n          return message;\n        }\n        locale = Session.get('_TranslatorService.locale') || 'en_US';\n        _ref = locale.split('_'), language = _ref[0], territory = _ref[1];\n        message = message[language];\n        if (_.isString(message)) {\n          return message;\n        }\n        if (_.isString(message != null ? message[territory] : void 0)) {\n          return message[territory];\n        }\n        if (_.isString(message != null ? message[\"default\"] : void 0)) {\n          return message[\"default\"];\n        }\n        throw Error('_meteor.translator.unknownMessageFormat');\n      };\n      this.translate = function(messageId, params) {\n        var errorMessage, errorMessageId, message;\n        if (params == null) {\n          params = {};\n        }\n        try {\n          message = retrieveMessage(messageId);\n          return resolveParams(message, params);\n        } catch (translationError) {\n          errorMessageId = translationError.message;\n          errorMessage = (function() {\n            try {\n              return resolveParams(retrieveMessage(errorMessageId), {\n                messageId: messageId\n              });\n            } catch (e) {\n              return (\"Translation Error: Cannot resolve error\\nmessage '\" + errorMessageId + \"' while translating '\" + messageId + \"'\").replace(/\\n/, ' ');\n            }\n          })();\n          console.log(errorMessage);\n          return '###' + messageId + '###';\n        }\n      };\n      if (Meteor.isClient) {\n        localLocale = window.localStorage.getItem('_TranslatorService.locale');\n        if (localLocale) {\n          Meteor.setLocale(localLocale);\n        }\n      }\n    }\n\n    return _TranslatorService;\n\n  })();\n\n  Meteor.setLocale = function(locale) {\n    if (Meteor.isClient) {\n      window.localStorage.setItem('_TranslatorService.locale', locale);\n    }\n    return Session.set('_TranslatorService.locale', locale);\n  };\n\n  Meteor.getLocale = function() {\n    return Session.get('_TranslatorService.locale');\n  };\n\n  Meteor._TranslatorService = new Meteor._TranslatorService();\n\n  if (Meteor.i18nMessages == null) {\n    Meteor.i18nMessages = {};\n  }\n\n  if (Meteor.i18nMessages._meteor == null) {\n    Meteor.i18nMessages._meteor = {};\n  }\n\n  Meteor.i18nMessages._meteor.translator = {\n    missingMessageNamespace: \"Translation error: The message namespace of \\\"{{messageId}}\\\" cannot\\nbe resolved.\".replace(/\\n/, ' '),\n    missingMessage: \"Translation error: The translation message \\\"{{messageId}}\\\" is\\nmissing in its message namespace.\".replace(/\\n/, ' '),\n    unknownMessageFormat: 'Translation error: Unknown message format for \"{{messageId}}\".'\n  };\n\n  root = typeof exports !== \"undefined\" && exports !== null ? exports : this;\n\n  root.__ = Meteor._TranslatorService.translate;\n\n}).call(this);\n"]}