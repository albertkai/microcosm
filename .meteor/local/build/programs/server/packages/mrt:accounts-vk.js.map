{"version":3,"file":"/packages/mrt:accounts-vk.js","sources":["mrt:accounts-vk/lib/accounts_vk.js","mrt:accounts-vk/lib/vk_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,qC;;AAEA,sB;AACA,sD;AACA,6C;AACA,0D;AACA,+B;AACA,2B;AACA,S;;AAEA,0G;AACA,yE;AACA,M;AACA,Q;AACA,mC;AACA,yC;AACA,wB;AACA,6B;AACA,mC;AACA,gC;AACA,S;AACA,O;AACA,C;;;;;;;;;;;;;;;;;;;ACtBA,Q;;AAEA,sD;;AAEA,8C;AACA,2C;AACA,+C;;AAEA,uB;AACA,iC;AACA,4D;AACA,M;;AAEA,0I;;AAEA,+C;AACA,kC;;AAEA,qC;AACA,2B;;AAEA,Y;AACA,iC;AACA,kB;AACA,sB;AACA,2F;AACA,a;AACA,S;AACA,M;AACA,G;;AAEA,gC;AACA,gB;AACA,4C;AACA,yC;AACA,8E;AACA,kB;AACA,6E;AACA,K;;AAEA,wB;;AAEA,S;AACA,kC;AACA,oC;AACA,sD;AACA,yB;AACA,gD;AACA,iD;AACA,8C;AACA,6E;AACA,iB;AACA,uB;;AAEA,mB;AACA,sG;AACA,sC;AACA,K;AACA,kE;AACA,6B;AACA,qD;;AAEA,oD;AACA,8C;;AAEA,yB;AACA,8E;AACA,+E;AACA,K;AACA,Y;AACA,mC;AACA,4B;AACA,M;AACA,E;;AAEA,0C;;AAEA,0B;AACA,yD;AACA,sC;AACA,iH;AACA,Y;;AAEA,0D;AACA,2B;;AAEA,mC;AACA,E;;AAEA,mD;AACA,qD;AACA,E","sourcesContent":["Accounts.oauth.registerService('vk');\n\nif (Meteor.isClient) {\n    Meteor.loginWithVk = function(options, callback) {\n        // support a callback without options\n        if (! callback && typeof options === \"function\") {\n            callback = options;\n            options = null;\n        }\n\n        var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n        VK.requestCredential(options, credentialRequestCompleteCallback);\n    };\n} else {\n    Accounts.addAutopublishFields({\n        forLoggedInUser: ['services.vk'],\n        forOtherUsers: [\n            'services.vk.id',\n            'services.vk.nickname',\n            'services.vk.gender'\n        ]\n    });\n}\n","VK = {};\n\nOauth.registerService('vk', 2, null, function(query) {\n\n    var response    = getTokenResponse(query);\n    var accessToken = response.accessToken;\n    var identity    = getIdentity(accessToken);\n\n    var serviceData = {\n        accessToken: accessToken,\n        expiresAt: (+new Date) + (1000 * response.expiresIn)\n    };\n\n    var whitelisted = ['uid', 'nickname', 'first_name', 'last_name', 'sex', 'bdate', 'timezone', 'photo', 'photo_big', 'city', 'country'];\n\n    var fields = _.pick(identity, whitelisted);\n    _.extend(serviceData, fields);\n\n    serviceData.id = serviceData.uid;\n    delete serviceData.uid;\n\n    return {\n        serviceData: serviceData,\n        options: {\n            profile: {\n                name: identity.nickname || (identity.first_name + ' ' + identity.last_name)\n            }\n        }\n    };\n});\n\n// returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\nvar getTokenResponse = function (query) {\n    var config = ServiceConfiguration.configurations.findOne({service: 'vk'});\n    if (!config) {\n        throw new ServiceConfiguration.ConfigError(\"Service not configured\");\n    }\n\n    var responseContent;\n\n    try {\n        // Request an access token\n        responseContent = HTTP.post(\n            \"https://api.vk.com/oauth/access_token\", {\n                params: {\n                    client_id:     config.appId,\n                    client_secret: config.secret,\n                    code:          query.code,\n                    redirect_uri: Meteor.absoluteUrl(\"_oauth/vk?close=close\")\n                }\n            }).content;\n\n    } catch (err) {\n        throw _.extend(new Error(\"Failed to complete OAuth handshake with vkontakte. \" + err.message),\n            {response: err.response});\n    }\n    // Success!  Extract the vkontakte access token and expiration\n    // time from the response\n    var parsedResponse = JSON.parse(responseContent);\n\n    var fbAccessToken = parsedResponse.access_token;\n    var fbExpires = parsedResponse.expires_in;\n\n    if (!fbAccessToken) {\n        throw new Error(\"Failed to complete OAuth handshake with vkontakte \" +\n            \"-- can't find access token in HTTP response. \" + responseContent);\n    }\n    return {\n        accessToken: fbAccessToken,\n        expiresIn: fbExpires\n    };\n};\n\nvar getIdentity = function (accessToken) {\n\n    var result = HTTP.get(\n        \"https://api.vk.com/method/users.get\", {params: {\n            access_token: accessToken,\n            fields: 'uid, nickname, first_name, last_name, sex, bdate, timezone, photo, photo_big, city, country'\n        }});\n\n    if (result.error) // if the http response was an error\n        throw result.error;\n\n    return result.data.response[0];\n};\n\nVK.retrieveCredential = function(credentialToken) {\n    return Oauth.retrieveCredential(credentialToken);\n};\n"]}